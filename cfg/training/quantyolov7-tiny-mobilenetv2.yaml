# parameters
nc: 80  # number of classes
depth_multiple: 1.0  # model depth multiple
width_multiple: 1.0  # layer channel multiple

# anchors
anchors:
  # - [10,13, 16,30, 33,23]  # P3/8
  # - [30,61, 62,45, 59,119]  # P4/16
  # - [116,90, 156,198, 373,326]  # P5/32
  - [5.98411,6.52313,  8.27757,17.12804, 18.98719,12.83173]
  - [17.77105,32.78500, 43.49384,29.53651, 32.10867,70.39865]
  - [72.08286,60.94646, 83.46799,131.28253, 200.35014,168.70149]

# yolov7-tiny backbone
backbone:
  # [from, number, module, args]
  # Conv args [filters, ksize, stride]
  # QuantConvBNReLU args [filters, ksize, stride=1, padding=None, weight_bitts=8, act_bits=8, groups=1]
  # InvertedResidual args [out_channels, stride, expand_ratio]
  # QuantDwsConv args [out_channels, stride=1, padding=None, w, a]
  [[-1, 1, QuantConvBNReLU, [32, 3, 2]],          # 0 stride 2

   [-1, 1, QuantInvertedResidual, [16, 1, 1, 4, 4, False]],

   [-1, 1, QuantInvertedResidual, [24, 2, 6, 4, 4, False]],    # 2 stride 4
   [-1, 1, QuantInvertedResidual, [24, 1, 6, 4, 4, False]],

   [-1, 1, QuantInvertedResidual, [32, 2, 6, 4, 4, False]],    # 4 stride 8
   [-1, 2, QuantInvertedResidual, [32, 1, 6, 4, 4, False]],

   [-1, 1, QuantInvertedResidual, [64, 2, 6, 4, 4, False]],        # 6 stride 16
   [-1, 3, QuantInvertedResidual, [64, 1, 6, 4, 4, False]],

   [-1, 1, QuantInvertedResidual, [96, 1, 6, 4, 4, False]],       # 8 stride 16
   [-1, 2, QuantInvertedResidual, [96, 1, 6, 4, 4, False]],

   [-1, 1, QuantInvertedResidual, [160, 2, 6, 4, 4, False]],      # 10 stride 32
   [-1, 2, QuantInvertedResidual, [160, 1, 6, 4, 4, False]],  

   [-1, 1, QuantInvertedResidual, [320, 1, 6, 4, 4, False]],     # 12 stride 32

   [-1, 1, QuantConvBNReLU, [1024, 1, 1, None, 4, 4]],          # 13 stride 32
  ]

# yolov7-tiny head
head:
  [[-1, 1, QuantConvBNReLU, [256, 1, 1, None, 4, 4]],  # 14
   [-2, 1, QuantConvBNReLU, [256, 1, 1, None, 4, 4]],
   [-1, 1, SP, [5]],
   [-2, 1, SP, [9]],
   [-3, 1, SP, [13]],
   [[-1, -2, -3, -4], 1, Concat, [1]],
   [-1, 1, QuantConvBNReLU, [256, 1, 1, None, 4, 4]],
   [[-1, -7], 1, Concat, [1]],
   [-1, 1, QuantConvBNReLU, [256, 1, 1, None, 4, 4]],  # 22
  
   [-1, 1, QuantConvBNReLU, [128, 1, 1, None, 4, 4]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [9, 1, QuantConvBNReLU, [128, 1, 1, None, 4, 4]], # route backbone P4
   [[-1, -2], 1, Concat, [1]],
   
   [-1, 1, QuantConvBNReLU, [64, 1, 1, None, 4, 4]],
   [-2, 1, QuantConvBNReLU, [64, 1, 1, None, 4, 4]],
   [-1, 1, QuantConvBNReLU, [64, 3, 1, None, 4, 4]],
   [-1, 1, QuantConvBNReLU, [64, 3, 1, None, 4, 4]],
   [[-1, -2, -3, -4], 1, Concat, [1]],
   [-1, 1, QuantConvBNReLU, [128, 1, 1, None, 4, 4]],  # 32
  
   [-1, 1, QuantConvBNReLU, [64, 1, 1, None, 4, 4]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [5, 1, QuantConvBNReLU, [64, 1, 1, None, 4, 4]], # route backbone P3
   [[-1, -2], 1, Concat, [1]],
   
   [-1, 1, QuantConvBNReLU, [32, 1, 1, None, 4, 4]],
   [-2, 1, QuantConvBNReLU, [32, 1, 1, None, 4, 4]],
   [-1, 1, QuantConvBNReLU, [32, 3, 1, None, 4, 4]],
   [-1, 1, QuantConvBNReLU, [32, 3, 1, None, 4, 4]],
   [[-1, -2, -3, -4], 1, Concat, [1]],
   [-1, 1, QuantConvBNReLU, [64, 1, 1, None, 4, 4]],  # 42
   
   [-1, 1, QuantConvBNReLU, [128, 3, 2, None, 4, 4]],
   [[-1, 32], 1, Concat, [1]],
   
   [-1, 1, QuantConvBNReLU, [64, 1, 1, None, 4, 4]],
   [-2, 1, QuantConvBNReLU, [64, 1, 1, None, 4, 4]],
   [-1, 1, QuantConvBNReLU, [64, 3, 1, None, 4, 4]],
   [-1, 1, QuantConvBNReLU, [64, 3, 1, None, 4, 4]],
   [[-1, -2, -3, -4], 1, Concat, [1]],
   [-1, 1, QuantConvBNReLU, [128, 1, 1, None, 4, 4]],  # 50
   
   [-1, 1, QuantConvBNReLU, [256, 3, 2, None, 4, 4]],
   [[-1, 22], 1, Concat, [1]],
   
   [-1, 1, QuantConvBNReLU, [128, 1, 1, None, 4, 4]],
   [-2, 1, QuantConvBNReLU, [128, 1, 1, None, 4, 4]],
   [-1, 1, QuantConvBNReLU, [128, 3, 1, None, 4, 4]],
   [-1, 1, QuantConvBNReLU, [128, 3, 1, None, 4, 4]],
   [[-1, -2, -3, -4], 1, Concat, [1]],
   [-1, 1, QuantConvBNReLU, [256, 1, 1, None, 4, 4]],  # 58
      
   [42, 1, QuantConvBNReLU, [128, 3, 1, None, 4, 4]],
   [50, 1, QuantConvBNReLU, [256, 3, 1, None, 4, 4]],
   [58, 1, QuantConvBNReLU, [512, 3, 1, None, 4, 4]],

   [[59,60,61], 1, QuantDetect, [nc, anchors, 8]],   # Detect(P3, P4, P5)
  ]
